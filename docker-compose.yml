version: "3.8"

services:
  # ================= PostgreSQL for Analytics Cache =================
  postgres:
    image: postgres:13
    container_name: analytics-postgres
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_pass
    ports:
      - "5432:5432"
    networks:
      - analytics-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================= Airflow =================
  redis:
    image: redis:latest
    networks:
      - analytics-network

  postgres_airflow:
    image: postgres:13
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    networks:
      - analytics-network
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data

  airflow-webserver:
    image: apache/airflow:2.7.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./config/airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8080:8080"
    networks:
      - analytics-network
    depends_on:
      - postgres_airflow
      - redis
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
        airflow webserver
      "

  airflow-scheduler:
    image: apache/airflow:2.7.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./config/airflow.cfg:/opt/airflow/airflow.cfg
    networks:
      - analytics-network
    depends_on:
      - postgres_airflow
      - redis
      - airflow-webserver
    command: bash -c "sleep 30 && airflow scheduler"

  airflow-worker:
    image: apache/airflow:2.7.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
      - ./config/airflow.cfg:/opt/airflow/airflow.cfg
    networks:
      - analytics-network
    depends_on:
      - postgres_airflow
      - redis
      - airflow-scheduler
    command: bash -c "sleep 30 && airflow worker"

  # ================= Superset =================
  superset:
    image: apache/superset:latest
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=your-super-secret-key-change-this
      - DATABASE_DB=superset
      - DATABASE_USER=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_HOST=postgres_superset
      - DATABASE_PORT=5432
    ports:
      - "8088:8088"
    networks:
      - analytics-network
    depends_on:
      - postgres_superset
    volumes:
      - superset_data:/app/superset_home
    command: >
      bash -c "
        sleep 30 &&
        superset db upgrade &&
        superset init &&
        superset run -p 8088 --host=0.0.0.0
      "

  postgres_superset:
    image: postgres:13
    container_name: postgres_superset
    environment:
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
    networks:
      - analytics-network
    volumes:
      - postgres_superset_data:/var/lib/postgresql/data

networks:
  analytics-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_airflow_data:
  postgres_superset_data:
  superset_data: